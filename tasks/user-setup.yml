---
  # Common setup tasks (e.g., user creation, SSH keys)
  - name: Create app user
    user:
      name: "{{ app_user }}"
      shell: /bin/bash
      create_home: yes

  - name: Create app directory
    file:
      path: "{{ deploy_path }}"
      state: directory
      owner: "{{ app_user }}"
      group: "{{ app_user }}"
      mode: "0755"

  - name: Configure SSH key
    authorized_key:
      user: "{{ app_user }}"
      state: present
      key: "{{ lookup('file', ssh_public_key_path) }}"

    # This was in the role
  - name: Ensure the user "{{ new_user }}" exists
    user:
      name: "{{ new_user }}"
      shell: /bin/bash
      create_home: yes
      state: present

  - name: Set up authorized SSH key
    authorized_key:
      user: "{{ new_user }}"
      state: present
      key: "{{ ssh_public_key }}"

  - name: Installing required packages
    ansible.builtin.package:
    name:
      - htop
      - tmux
      - neovim
      - rsync
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - python3-pip
      - virtualenv
      - python3-setuptools
      - ripgrep
      - remmina
      - mariadb-server
      - fuse
      - texlive-full
    state: latest
    update_cache: true

  - name: "Creating user: {{ user_name }}"
    ansible.builtin.user:
      state: present
      name: "{{ user_name }}"
      create_home: yes
      shell: /bin/bash
      generate_ssh_key: yes
      ssh_key_bits: 4096
      ssh_key_file: ".ssh/{{ user_name }}_rsa"
      groups:
      - docker
      - sudo

  - name: "Creating directory for application data in {{ user_name }} home directory"
    file:
      path: "/home/{{ user_name }}/{{ item.path }}"
      mode: "{{ item.attrs }}"
      state: directory
      recurse: yes
    with_items:
      "{{ application_directories }}"

  - name: GENERATE ANSIBLE SSH KEYPAIR
    community.crypto.openssh_keypair:
      path: "/home/{{ user_name }}/.ssh/reactapp"
      type: ed25519
      state: present
      size: 4096
    become_user: "{{ user_name }}"

  - name: GENERATE GITHUB OPENSSH KEYPAIR
    community.crypto.openssh_keypair:
      path: "/home/{{ user_name }}/.ssh/fastapi"
      type: ed25519
      state: present
      size: 4096
    become_user: "{{ user_name }}"

  - name: Evaluating the authentication agent & adding the key...
    shell: |
      eval "$(ssh-agent)"
      ssh-add "/home/{{ user_name }}/.ssh/react"
      ssh-add "/home/{{ user_name }}/.ssh/fastapi"
    become_user: "{{ user_name }}"

  - name: Configure Cron job for regular DB backup
    ansible.builtin.cron:
      name: Backup DB every hour every hour
      special_time: hourly
      job: "/home/{{ scripts_directory }}/{{ regular_backup_script }}"
      state: present
    become: false

  - name: Configure Cron job for semi-regular DB backup
    ansible.builtin.cron:
      name: Backup DB every day
      special_time: daily
      job: "/home/{{ scripts_directory }}/{{ semi_regular_backup_script }}"
      state: present
    become: false

# - name: Pull the most recent version of conda for the web
#   ansible.builtin.uri:
#     url: https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh
#     dest: /tmp
#     method: GET
#   delegate_to: localhost
# - name: Install Anaconda onto system
#   expect:
#     command: cd /tmp && bash Anaconda3-2020.11-Linux-x86_64.sh
#     responses:
#       "Please, press ENTER to continue": "\cr"
#       "Please answer yes or no": "yes"

  # ignore_errors: true
  # delegate_to: localhost

