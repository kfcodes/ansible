---
# Create the symbolic links for the linux dot files
- name: Create symbolic link for directory colours
  ansible.builtin.file:
    src: "/home/{{ local_usr }}/.dotfiles/.dircolors"
    dest: "/home/{{ local_usr }}/.dircolors" 
    owner: "{{ local_usr }}"
    group: "{{ local_usr }}"
    state: link
    force: yes

- name: Create symbolic for X resources
  ansible.builtin.file:
    src: "/home/{{ local_usr }}/.dotfiles/.Xresources"
    dest: "/home/{{ local_usr }}/.Xresources" 
    owner: "{{ local_usr }}"
    group: "{{ local_usr }}"
    state: link
    force: yes

- name: Create symbolic link for X session
  ansible.builtin.file:
    src: "/home/{{ local_usr }}/.dotfiles/.xsession"
    dest: "/home/{{ local_usr }}/.xsession" 
    owner: "{{ local_usr }}"
    group: "{{ local_usr }}"
    state: link
    force: yes

# THIS IS REMOVED FOR NOW TO USE THE DEFAULT BASH RC FILE
# - name: Create symbolic link for input rc config
#   ansible.builtin.file:
#     src: "/home/{{ local_usr }}/.dotfiles/.bashrc"
#     dest: "/home/{{ local_usr }}/.bashrc" 
#     owner: "{{ local_usr }}"
#     group: "{{ local_usr }}"
#     state: link
#     force: yes

- name: Create symbolic link for input rc config
  ansible.builtin.file:
    src: "/home/{{ local_usr }}/.dotfiles/.inputrc"
    dest: "/home/{{ local_usr }}/.inputrc" 
    owner: "{{ local_usr }}"
    group: "{{ local_usr }}"
    state: link
    force: yes

- name: Create symbolic link for MPV config
  ansible.builtin.file:
    src: "/home/{{ local_usr }}/.dotfiles/mpv.conf"
    dest: "/home/{{ local_usr }}/.config/mpv/mpv.conf" 
    owner: "{{ local_usr }}"
    group: "{{ local_usr }}"
    state: link
    force: yes

- name: Create symbolic link for Tmux config
  ansible.builtin.file:
    src: "/home/{{ local_usr }}/.dotfiles/.tmux.conf"
    dest: "/home/{{ local_usr }}/.tmux.conf" 
    owner: "{{ local_usr }}"
    group: "{{ local_usr }}"
    state: link
    force: yes

# Create symbolic link to the NeoVIM config directory
- name: Create symbolic link for NeoVIM config
  ansible.builtin.file:
    src: "/home/{{ local_usr }}/.nvim"
    dest: "/home/{{ local_usr }}/.config/nvim" 
    owner: "{{ local_usr }}"
    group: "{{ local_usr }}"
    state: link
    force: yes

# Create application directories for holding application data
- name: "Creating directory for application data in {{ local_usr }} home directory"
  ansible.builtin.file:
    path: "/home/{{ local_usr }}/{{ item.path }}"
    mode: "{{ item.attrs }}"
    state: directory
    recurse: yes
    owner: "{{ local_usr }}"
    group: "{{ local_usr }}"
  with_items:
    "{{ application_directories }}"

- name: creating link to the .env file for the react app dev repo
  ansible.builtin.file:
    src: "/home/{{ local_usr }}/.application/app_control/env_vars/reactApp.env"
    dest: "/home/{{ local_usr }}/.reactapp/.env" 
    owner: "{{ local_usr }}"
    group: "{{ local_usr }}"
    state: link
    force: yes
  ignore_errors: true
  become_user: "{{ local_usr }}"

- name: creating link to the .env file for the fastAPI dev repo
  ansible.builtin.file:
    src: "/home/{{ local_usr }}/.application/app_control/env_vars/fastAPI.env"
    dest: "/home/{{ local_usr }}/.fastapi/app/.env" 
    owner: "{{ local_usr }}"
    group: "{{ local_usr }}"
    state: link
    force: yes
  ignore_errors: true
  become_user: "{{ local_usr }}"

- name: Linking the data models layer directory for the fastAPI app to the dev repo
  ansible.builtin.file:
    src: "/home/{{ local_usr }}/.application/app_files/data_models_layer"
    dest: "/home/{{ local_usr }}/.fastapi/app/physical_layer/data_models_layer" 
    state: link
    force: yes
  ignore_errors: true
  become_user: "{{ local_usr }}"

- name: Linking the label structure layer directory for the fastAPI app to the dev repo
  ansible.builtin.file:
    src: "/home/{{ local_usr }}/.application/app_files/label_structure_layer"
    dest: "/home/{{ local_usr }}/.fastapi/app/physical_layer/label_structure_layer" 
    state: link
    force: yes
  ignore_errors: true
  become_user: "{{ local_usr }}"

- name: Installing npm packages for reactapp from package.json to their latest versions
  community.general.npm:
    path: "/home/{{ local_usr }}/.reactapp/" 
    state: latest
  ignore_errors: true
  become_user: "{{ local_usr }}"

- name: Installing packages from requirements fastAPI into virtualenv
  ansible.builtin.pip:
    requirements: /home/{{ local_usr }}/.fastapi/requirements.txt
    virtualenv: /home/{{ local_usr }}/.fastapi/.venv
  ignore_errors: true
  become_user: "{{ local_usr }}"

- name: add the .bin folder of scripts to the PATH
  ansible.builtin.lineinfile:
    path: /home/{{ local_usr }}/.bashrc
    insertafter: EOF
    line: export PATH="/home/{{ local_usr }}/.bin:$PATH"
    state: present

# Configure Gnome environment

# Configure Suckless software 
