# Initialize the list that will track failed syncs, if not already defined
- name: Ensure failed_syncs list is initialized
  set_fact:
    failed_syncs: []
  when: failed_syncs is not defined

# Loop over each defined sync job and run the rsync task using ansible.posix.synchronize
- name: Synchronize resource directories with error tracking
  block:

    # Run the sync operation with job-specific or default rsync options
    - name: "{{ item.name }}"
      ansible.posix.synchronize:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode | default('push') }}"
        rsync_opts: "{{ item.rsync_opts | default(default_rsync_opts) }}"
        checksum: true         # Use checksums for changes (safer than timestamp)
        delete: true           # Delete files not present in source
        links: false
        recursive: true
        owner: false
        group: false
        perms: false
        times: false
      register: sync_result
      failed_when: false      # Don't fail the play even if the sync fails

  rescue:
    # If sync fails, append the job name to the failed_syncs list
    - name: Record failed sync for {{ item.name }}
      set_fact:
        failed_syncs: "{{ failed_syncs + [item.name] }}"

    # Log a message to the console showing the sync job that failed
    - name: Log sync failure for {{ item.name }}
      debug:
        msg: "❌ Sync failed: {{ item.name }} (src={{ item.src }}, dest={{ item.dest }})"

  loop: "{{ sync_jobs }}"
  loop_control:
    label: "{{ item.name }}"
  become: false

# Print summary of all sync jobs that failed
- name: Display summary of failed sync jobs (if any)
  debug:
    msg: |
      ❗ The following sync jobs failed:
      {{ failed_syncs | join(', ') }}
  when: failed_syncs is defined and failed_syncs | length > 0
